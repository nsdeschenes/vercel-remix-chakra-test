{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/.pnpm/@remix-run+dev@1.6.3_abnwi3ql5gibhllxrycxs3ju3y/node_modules/@remix-run/dev/dist/compiler/shims/react.ts", "../app/entry.server.tsx", "../app/context.tsx", "../app/createEmotionCache.tsx", "/Users/nicholas/Projects/TypeScript/my-new-remix-app/app/root.tsx", "/Users/nicholas/Projects/TypeScript/my-new-remix-app/app/routes/index.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "// entry.server.tsx\nimport { CacheProvider } from \"@emotion/react\";\nimport createEmotionServer from \"@emotion/server/create-instance\";\nimport type { EntryContext } from \"@remix-run/node\"; // Depends on the runtime you choose\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nimport { ServerStyleContext } from \"./context\";\nimport createEmotionCache from \"./createEmotionCache\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  const cache = createEmotionCache();\n  const { extractCriticalToChunks } = createEmotionServer(cache);\n\n  const html = renderToString(\n    <ServerStyleContext.Provider value={null}>\n      <CacheProvider value={cache}>\n        <RemixServer context={remixContext} url={request.url} />\n      </CacheProvider>\n    </ServerStyleContext.Provider>\n  );\n\n  const chunks = extractCriticalToChunks(html);\n\n  const markup = renderToString(\n    <ServerStyleContext.Provider value={chunks.styles}>\n      <CacheProvider value={cache}>\n        <RemixServer context={remixContext} url={request.url} />\n      </CacheProvider>\n    </ServerStyleContext.Provider>\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(`<!DOCTYPE html>${markup}`, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "// context.tsx\nimport { createContext } from \"react\";\n\nexport interface ServerStyleContextData {\n  key: string;\n  ids: Array<string>;\n  css: string;\n}\n\nexport const ServerStyleContext = createContext<\n  ServerStyleContextData[] | null\n>(null);\n\nexport interface ClientStyleContextData {\n  reset: () => void;\n}\n\nexport const ClientStyleContext = createContext<ClientStyleContextData | null>(\n  null\n);\n", "// createEmotionCache.ts\nimport createCache from \"@emotion/cache\";\n\nexport default function createEmotionCache() {\n  return createCache({ key: \"css\" });\n}\n", "// root.tsx\nimport { ChakraProvider } from '@chakra-ui/react'\nimport { withEmotionCache } from '@emotion/react'\nimport { LinksFunction, MetaFunction } from '@remix-run/node' // Depends on the runtime you choose\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from '@remix-run/react'\nimport React, { useContext, useEffect } from 'react'\n\nimport { ClientStyleContext, ServerStyleContext } from './context'\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'New Remix App',\n  viewport: 'width=device-width,initial-scale=1',\n})\n\nexport let links: LinksFunction = () => {\n  return [\n    { rel: 'preconnect', href: 'https://fonts.googleapis.com' },\n    { rel: 'preconnect', href: 'https://fonts.gstatic.com' },\n    {\n      rel: 'stylesheet',\n      href: 'https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap',\n    },\n  ]\n}\n\ninterface DocumentProps {\n  children: React.ReactNode\n}\n\nconst Document = withEmotionCache(\n  ({ children }: DocumentProps, emotionCache) => {\n    const serverStyleData = useContext(ServerStyleContext)\n    const clientStyleData = useContext(ClientStyleContext)\n\n    // Only executed on client\n    useEffect(() => {\n      // re-link sheet container\n      emotionCache.sheet.container = document.head\n      // re-inject tags\n      const tags = emotionCache.sheet.tags\n      emotionCache.sheet.flush()\n      tags.forEach((tag) => {\n        ;(emotionCache.sheet as any)._insertTag(tag)\n      })\n      // reset cache to reapply global styles\n      clientStyleData?.reset()\n    }, [])\n\n    return (\n      <html lang='en'>\n        <head>\n          <Meta />\n          <Links />\n          {serverStyleData?.map(({ key, ids, css }) => (\n            <style\n              key={key}\n              data-emotion={`${key} ${ids.join(' ')}`}\n              dangerouslySetInnerHTML={{ __html: css }}\n            />\n          ))}\n        </head>\n        <body>\n          {children}\n          <ScrollRestoration />\n          <Scripts />\n          <LiveReload />\n        </body>\n      </html>\n    )\n  }\n)\n\nexport default function App() {\n  return (\n    <Document>\n      <ChakraProvider>\n        <Outlet />\n      </ChakraProvider>\n    </Document>\n  )\n}\n", "import { Box } from \"@chakra-ui/react\";\n\nconst Index = () => {\n  return (\n    <Box bg=\"tomato\" w=\"100%\" p={4} color=\"white\">\n      Hello World!\n    </Box>\n  );\n};\n\nexport default Index;\n", "export default {'version':'6688c8a3','entry':{'module':'/build/entry.client-UFRXUBDP.js','imports':['/build/_shared/chunk-C3YPTD4V.js','/build/_shared/chunk-AEP3AZGL.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-6JUNRLIH.js','imports':['/build/_shared/chunk-B5IJ42OD.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-YEBPTMLE.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-6688C8A3.js'};", "\nimport * as entryServer from \"/Users/nicholas/Projects/TypeScript/my-new-remix-app/app/entry.server.tsx\";\nimport * as route0 from \"/Users/nicholas/Projects/TypeScript/my-new-remix-app/app/root.tsx\";\nimport * as route1 from \"/Users/nicholas/Projects/TypeScript/my-new-remix-app/app/routes/index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route1\n    }\n  };"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,YAAuB;;;ACDvB;AAAA;AAAA;AAAA;AACA,oBAA8B,2BAC9B,yBAAgC,qDAEhC,gBAA4B,6BAC5B,gBAA+B;;;ACJ/B,mBAA8B,kBAQjB,qBAAqB,gCAEhC,OAMW,qBAAqB,gCAChC;;;ACjBF,mBAAwB;AAET,8BAA8B;AAC3C,SAAO,0BAAY,EAAE,KAAK;AAAA;;;AFMb,uBACb,SACA,oBACA,iBACA,cACA;AACA,MAAM,QAAQ,sBACR,EAAE,4BAA4B,oCAAoB,QAElD,OAAO,kCACX,oCAAC,mBAAmB,UAApB;AAAA,IAA6B,OAAO;AAAA,KAClC,oCAAC,6BAAD;AAAA,IAAe,OAAO;AAAA,KACpB,oCAAC,2BAAD;AAAA,IAAa,SAAS;AAAA,IAAc,KAAK,QAAQ;AAAA,SAKjD,SAAS,wBAAwB,OAEjC,SAAS,kCACb,oCAAC,mBAAmB,UAApB;AAAA,IAA6B,OAAO,OAAO;AAAA,KACzC,oCAAC,6BAAD;AAAA,IAAe,OAAO;AAAA,KACpB,oCAAC,2BAAD;AAAA,IAAa,SAAS;AAAA,IAAc,KAAK,QAAQ;AAAA;AAKvD,yBAAgB,IAAI,gBAAgB,cAE7B,IAAI,SAAS,kBAAkB,UAAU;AAAA,IAC9C,QAAQ;AAAA,IACR,SAAS;AAAA;AAAA;;;AGzCb;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAA+B,6BAC/B,gBAAiC,2BAEjC,gBAOO,6BACP,gBAA6C;AAItC,IAAM,OAAqB,MAAO;AAAA,EACvC,SAAS;AAAA,EACT,OAAO;AAAA,EACP,UAAU;AAAA,IAGD,QAAuB,MACzB;AAAA,EACL,EAAE,KAAK,cAAc,MAAM;AAAA,EAC3B,EAAE,KAAK,cAAc,MAAM;AAAA,EAC3B;AAAA,IACE,KAAK;AAAA,IACL,MAAM;AAAA;AAAA,GASN,WAAW,oCACf,CAAC,EAAE,YAA2B,iBAAiB;AAC7C,MAAM,kBAAkB,8BAAW,qBAC7B,kBAAkB,8BAAW;AAGnC,sCAAU,MAAM;AAEd,iBAAa,MAAM,YAAY,SAAS;AAExC,QAAM,OAAO,aAAa,MAAM;AAChC,iBAAa,MAAM,SACnB,KAAK,QAAQ,CAAC,QAAQ;AACnB,MAAC,aAAa,MAAc,WAAW;AAAA,QAG1C,2CAAiB;AAAA,KAChB,KAGD,oDAAC,QAAD;AAAA,IAAM,MAAK;AAAA,KACT,oDAAC,QAAD,MACE,oDAAC,oBAAD,OACA,oDAAC,qBAAD,OACC,mDAAiB,IAAI,CAAC,EAAE,KAAK,KAAK,UACjC,oDAAC,SAAD;AAAA,IACE;AAAA,IACA,gBAAc,GAAG,OAAO,IAAI,KAAK;AAAA,IACjC,yBAAyB,EAAE,QAAQ;AAAA,QAIzC,oDAAC,QAAD,MACG,UACD,oDAAC,iCAAD,OACA,oDAAC,uBAAD,OACA,oDAAC,0BAAD;AAAA;AAOK,eAAe;AAC5B,SACE,oDAAC,UAAD,MACE,oDAAC,8BAAD,MACE,oDAAC,sBAAD;AAAA;;;ACpFR;AAAA;AAAA;AAAA;AAAA,oBAAoB,6BAEd,QAAQ,MAEV,oCAAC,mBAAD;AAAA,EAAK,IAAG;AAAA,EAAS,GAAE;AAAA,EAAO,GAAG;AAAA,EAAG,OAAM;AAAA,GAAQ,iBAM3C,iBAAQ;;;ACVf,IAAO,0BAAQ,EAAC,SAAU,YAAW,OAAQ,EAAC,QAAS,mCAAkC,SAAU,CAAC,oCAAmC,uCAAqC,QAAS,EAAC,MAAO,EAAC,IAAK,QAAO,UAAW,QAAU,MAAO,IAAG,OAAQ,QAAU,eAAgB,QAAU,QAAS,2BAA0B,SAAU,CAAC,qCAAoC,WAAY,IAAM,WAAY,IAAM,kBAAmB,IAAM,kBAAmB,MAAO,gBAAe,EAAC,IAAK,gBAAe,UAAW,QAAO,MAAO,QAAU,OAAQ,IAAK,eAAgB,QAAU,QAAS,mCAAkC,SAAU,QAAU,WAAY,IAAM,WAAY,IAAM,kBAAmB,IAAM,kBAAmB,QAAQ,KAAM;;;ACKhsB,IAAM,QAAQ,EAAE,QAAQ,wBAClB,SAAS;AAAA,EACpB,MAAQ;AAAA,IACN,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,gBAAgB;AAAA,IACZ,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA;",
  "names": []
}
